<?xml version="1.0" encoding="UTF-8" ?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work 
	for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you 
	may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless 
	required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. -->


<!-- @version $Id: applicationContext.xml 561608 2007-08-01 00:33:12Z vgritsenko $ -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 通过此项配置，spring将会支持下面的资源文件的引用，你可以使用${key}来引用资源文件内的键值对 -->
	<bean id="propertyConfigurer2" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 其中order属性代表其加载顺序 -->
		<property name="order" value="2" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
			    <value>classpath:config/spring/evn-setting.properties</value>
				<value>classpath:config/mybatis/datasource-setting.properties</value>
			</list>
		</property>
	</bean>


    <!-- 多数据源 -->
	<!-- <bean id="dynamicDataSource" class="com.elfleaf.framework.spring.DynamicDataSource">
		通过key-value的形式来关联数据源
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSourceA" key="dataSourceA"></entry>
				<entry value-ref="dataSourceB" key="dataSourceB"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceA">
		</property>
	</bean>    -->


	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${${env}.driverClass.mysql}" />
		<property name="jdbcUrl" value="${${env}.jdbcUrl.datasource1}" />
		<!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
		<property name="acquireIncrement" value="1" />
		<!-- 隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查 -->
		<property name="idleConnectionTestPeriod" value="300" />
		<!-- 连接池中保留的最大连接数。默认为15 -->
		<property name="maxPoolSize" value="15" />
		<property name="minPoolSize" value="1" />
		<!-- 初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3 -->
		<property name="initialPoolSize" value="3" />
		<!-- C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； -->
		<property name="numHelperThreads" value="3" />
		<!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； -->
		<property name="maxIdleTime" value="1200" />
		<!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30； -->
		<property name="acquireRetryAttempts" value="3" />
		<!-- 定义所有连接测试都执行的测试语句 -->
		<!-- <property name="preferredTestQuery" value=" select 1 from dual "/> -->
		<!-- 如果设为true那么在取得连接的同时将校验连接的有效性 -->
		<!-- <property name="testConnectionOnCheckin" value="true" /> -->
		<!-- 用户名密码 -->
		<property name="properties" ref="dataSourceProperties1" />

	</bean>

	<!-- 数据库连接用户名密码，密码已加密 -->
	<bean id="dataSourceProperties1" class="com.elfleaf.framework.mybatis.PropertiesEncryptFactoryBean">
		<property name="properties">
			<props>
				<prop key="user">${${env}.datasource1.user}</prop>
				<prop key="password">${${env}.datasource1.password}</prop>
			</props>
		</property>
	</bean>
<!-- 
	<bean id="dataSourceB" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url.b}?zeroDateTimeBehavior=convertToNull&characterEncoding=utf8"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="minPoolSize" value="${jdbc.miniPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
	</bean>
 -->






	<!-- mybatis sqlsession管理器 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/config/mybatis/sqlMap-config.xml" />
	</bean>
	<!-- 当sqlSessionFactory和SqlSessionTemplate都配置的时候，只读SqlSessionTemplate <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> <constructor-arg 
		index="0" ref="sqlSessionFactory" /> </bean> -->




</beans>


