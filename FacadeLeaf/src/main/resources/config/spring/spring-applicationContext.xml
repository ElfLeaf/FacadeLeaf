<?xml version="1.0" encoding="UTF-8" ?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work 
	for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the "License"); you 
	may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless 
	required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. -->


<!-- @version $Id: applicationContext.xml 561608 2007-08-01 00:33:12Z vgritsenko $ -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context-3.2.xsd
                    http://www.springframework.org/schema/mvc  
                    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 通过此项配置，spring将会支持下面的资源文件的引用，你可以使用${key}来引用资源文件内的键值对 -->
	<bean id="propertyConfigurer1" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 其中order属性代表其加载顺序 -->
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:config/spring/evn-setting.properties</value>
			</list>
		</property>
	</bean>


	<!-- shiro相关配置 -->
	<!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"> <property name="securityManager" ref="securityManager" /> <property 
		name="loginUrl" value="/login" /> <property name="successUrl" value="/welcome" /> <property name="unauthorizedUrl" value="/403" /> <property name="filters"> 
		<map> <entry key="authc" value-ref="formAuthenticationFilter"></entry> </map> </property> <property name="filterChainDefinitions"> <value> /=anon /login.do*=authc 
		/logout.do*=anon # 权限配置示例 /security/account/view.do=authc,perms[SECURITY_ACCOUNT_VIEW] /** = authc </value> </property> </bean> <bean id="securityManager" 
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"> <property name="realm" ref="myShiroRealm" /> </bean> <bean id="myShiroRealm" class="xxx.packagename.MyShiroRealm"> 
		businessManager 用来实现用户名密码的查询 <property name="businessManager" ref="businessManager" /> <property name="cacheManager" ref="shiroCacheManager" /> </bean> 
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" /> <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManager" ref="cacheManager" /> </bean> <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter" 
		/> -->
	<!-- shiro相关配置结束 -->




    <!-- jcaptcha验证码配置 -->
<!-- 	<bean id="captchaServlet" class="com.jawava.XXXX.XXX.TopImageCaptchaServlet" />
	<bean id="captchaService" class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<description>验证码服务</description>
		<constructor-arg index="0">
			<ref bean="imageEngine" />
		</constructor-arg>
		<constructor-arg index="1">
			<value>300</value>
		</constructor-arg>超时时间 秒
		<constructor-arg index="2">
			<value>20000</value>
		</constructor-arg>最大并发数
		<constructor-arg index="3">
			<value>20000</value>
		</constructor-arg>
		第四个参数官网示例上没有给出，会报错，后来看了API才知道少了个参数
	</bean>
	<bean id="imageEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
		<description>图片引擎</description>
		<constructor-arg index="0">
			<list>
				<ref bean="CaptchaFactory" />
			</list>
		</constructor-arg>
	</bean>
	<bean id="CaptchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory">
		<description>验证码工厂</description>
		<constructor-arg>
			<ref bean="wordgen" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage" />
		</constructor-arg>
	</bean>
	<bean id="wordgen" class="com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">
		<description>文字产生器，提供了好几种实现，经过比较选用了这种</description>
		<constructor-arg index="0">
			<value>0123456789</value>
		</constructor-arg>
	</bean>
	<bean id="wordtoimage" class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<description>图片生成器</description>
		<constructor-arg index="0">
			<ref bean="fontGenRandom" />
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni" />
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="simpleWhitePaster" />
		</constructor-arg>
	</bean>
	<bean id="fontGenRandom" class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<description>文字转换图片</description>
		<constructor-arg index="0">
			<value>20</value>
		</constructor-arg>字体最小尺寸
		<constructor-arg index="1">
			<value>20</value>
		</constructor-arg>字体最大尺寸
	</bean>
	<bean id="backGenUni" class="com.octo.captcha.component.image.backgroundgenerator.GradientBackgroundGenerator">
		<constructor-arg index="0">
			<value>62</value>
		</constructor-arg>背景图片宽度
		<constructor-arg index="1">
			<value>22</value>
		</constructor-arg>背景图片高度
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="colorGrey" />
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="3">
			<ref bean="colorGreen" />
		</constructor-arg>

	</bean>
	<bean id="simpleWhitePaster" class="com.octo.captcha.component.image.textpaster.SimpleTextPaster">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>4</value>字符最少个数
		</constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1">
			<value>4</value>字符最多个数
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="colorFont" />
		</constructor-arg>
	</bean>
	<bean id="colorGrey" class="java.awt.Color">
		<constructor-arg index="0">
			<value>200</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>255</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>200</value>
		</constructor-arg>
	</bean>
	<bean id="colorGreen" class="java.awt.Color">
		<constructor-arg index="0">
			<value>110</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>120</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>200</value>
		</constructor-arg>
	</bean>
	<bean id="colorFont" class="java.awt.Color">
		<constructor-arg index="0">
			<value>60</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>60</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>60</value>
		</constructor-arg>
	</bean> -->










	<!-- Configure Log4j -->
	<!-- <bean name="org.apache.cocoon.spring.configurator.log4j" class="org.apache.cocoon.spring.configurator.log4j.Log4JConfigurator" scope="singleton"> 
		<property name="settings" ref="org.apache.cocoon.configuration.Settings"/> <property name="resource" value="/WEB-INF/log4j.xml"/> </bean> -->

	<!-- <bean id="log4jInitialization" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> <property name="targetClass" value="org.springframework.util.Log4jConfigurer" 
		/> <property name="targetMethod" value="initLogging" /> <property name="arguments"> <list> <value>WEB-INF/log4j.xml</value> </list> </property> </bean> -->


	<!-- spring支持el方法 <context:property-placeholder location="classpath:db.properties"/> -->

	<!-- <context:component-scan base-package="leot.test" use-default-filters="false"> <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" 
		/> <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" /> <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" 
		/> <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" /> </context:component-scan> -->
</beans>


